package com.hitechbunny;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by home on 4/18/16.
 */
public class Opening {
    private static List<String> player1 = new ArrayList<>();
    private static List<String> player2 = new ArrayList<>();

    static {
add(1, "511141613");
add(2, "433344447636664636755311111122222255775577");
add(2, "433344341447733111112525222525");
add(2, "4333374444342223721551111177666556557722");
add(2, "4333374444342223525571157722116666667711");
add(2, "433337444434222325115711775511666576656722");
add(2, "43333744144111341355571777762266255522266");
add(2, "4333371444455655551436613111222");
add(2, "4376634337144647114215131366677722");
add(2, "4376634337144647114215131366677755");
add(2, "4376634337144647114215131366767722");
add(2, "4376634337144647114215661363177722");
add(2, "4376634337144647114215661313677722");
add(2, "4376634337144647114215661331677722");
add(2, "4376634337144647114237751166613722");
add(2, "437663433766773444436752671222112112155");
add(2, "43766343376677344443672221211");
add(2, "4376634337667734444367627221211");
add(2, "43766343376677344443527221211");
add(2, "4344443475553375773317172211226662266611");
add(2, "434444347555337577773315511122226666622611");
add(2, "43444434755533155533711177666622227766");
add(2, "4344443475553315171177666666222255221133");
add(2, "434444347555333366576622225566");
add(2, "4344443475557377516666133377112222662211");
add(2, "434444347555131573771111222222666665567733");
add(2, "434444347555137377577551666666112222323211");
add(2, "434444347555531553177711116666662222227733");
add(2, "43444413343375116513565766712217667722");
add(2, "436744433233421131211241522567777755");
add(2, "436744433233421131211241525267777755");
add(2, "436744433242331131211241522567777755");
add(2, "436744433264771233314171117722225555");
add(2, "4367444323364346222122635655");
add(2, "43676736434437764661174337115555115522");
add(2, "43676736434437764661413111555531775522");
add(2, "4367673634334264743417771111122");
add(2, "4367676664433223232241411");
add(2, "43676766644342277333447131515");
add(2, "43676766644342277333447171515");
add(2, "436767667447733342214423211");
add(2, "436767667447733342214423212");
add(2, "4367676674477342254431315");
add(2, "436767667447436225113");
add(2, "4367676674474344322131515");
add(2, "4367676674473331515");
add(2, "436767661443322431515");
add(2, "436767443433437437176666272111551122");
add(2, "436767443433437437176666271211551122");
add(2, "436767443433437437171711115522555522");
add(2, "436767443433437437171711551122555522");
add(2, "436767443433437437171711552255115522");
add(2, "43676776644334443673557761315111515522");
add(2, "43676776644334443673115577615111355522");
add(2, "43676776644334443655617133771111555522");
add(2, "43676776644334443655613371775111155522");
add(2, "4367677664333443464512111113677755");
add(2, "4367343374441313451177117667666522222255");
add(2, "4367343374441343775717222222111166656655");
add(2, "4367343374443632212477166667711");
add(2, "436734336664437434771122221121665125555577");
add(2, "436734336664434431121121216565577777555222");
add(2, "436734336664434431121121776162757755");
add(2, "436734336664434411116631155555577777222222");
add(2, "436734336664434411113115552222225565677777");
add(2, "436734336664434411661131155555577722722272");
add(2, "436734336664434411663111212");
add(2, "4367343366644344113665777111212");
add(2, "436734336646441722211");
add(2, "4314431337311344411262767677766655");
add(2, "4314431337311344416271727776666655");
add(2, "4314431337311344555171722455777566");
add(2, "511141613");

}

    public static void add(int player, String moves) {
        if (player == 1) {
            player1.add(moves);
        } else {
            player2.add(moves);
        }
    }

    public static Integer getMove(int player, String moves) {
        List<String> openings = player == 1 ? player1 : player2;
        for(String candidate : openings) {
            if (candidate.startsWith(moves) && candidate.length() > moves.length()) {
                int move = Integer.parseInt(candidate.substring(moves.length(), moves.length()+1));
                return move;
            }
        }

        return null;
    }
}
