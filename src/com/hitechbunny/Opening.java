package com.hitechbunny;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by home on 4/18/16.
 */
public class Opening {
    private static List<String> player1 = new ArrayList<>();
    private static List<String> player2 = new ArrayList<>();

    static {
add(1, "36634232443433422554121126655556611");
add(2, "45244155547411711421667733776633335522");
add(2, "4524415554741141727777153333531222");
add(2, "452441555445111177145222227777666633333366");
add(2, "452441555445111177145222227733333377666666");
add(2, "452441555445111177147733333377522222666666");
add(2, "452441555445111177147733333377526262226666");
add(2, "452441554422551572722416611177773333");
add(2, "452441554461525115222264711777776663");
add(2, "452441424451577576557773331111333222266");
add(2, "452441424451575521127512627717766");
add(2, "452441424451575551122172776217766");
add(2, "452441425515442551332226166617163333677777");
add(2, "452441425544152551332226166617163333677777");
add(2, "45244142552114155664522211767673");
add(2, "45244142157755747477551111222363");
add(2, "4524412224555475151422767711336766");
add(2, "452441222455547515741262771133677666");
add(2, "45244122245554751524126611773376667633");
add(2, "45244122554442122363333316111665");
add(2, "452413435541233644113675737771557122");
add(2, "452413435541233644116571331755777766");
add(2, "452413435541233644115655331177777766");
add(2, "452413435541233644567777331155117766");
add(2, "452413435541233644561133117777557766");
add(2, "452413435541233644351173715561777766");
add(2, "452413435541233644353677557711117766");
add(2, "452413435541233644755576337777111166");
add(2, "452413435533242253443755777772266666611");
add(2, "452454423115541242221176133376667773663755");
add(2, "452454423115542211245526171666733377773366");
add(2, "452454423115425514517622277776666673333311");
add(2, "452454423115425541562226666177777673333311");
add(2, "4524544231154255411657227777721166");
add(2, "452454423115422215455126777777661133");
add(2, "452454423115422215455162777777661133");
add(2, "452454423115422255145126777776766333336611");
add(2, "4524544231154277422771775562511133");
add(2, "452454423115122245455126776676661133");
add(2, "452454423115122245541115627667777733");
add(2, "452454423115122255512677777666446673333311");
add(2, "452454423115124455512226777776666673333311");
add(2, "452454423115124455512272677776666763333311");
add(2, "452454423115124455512262777776733366663311");
add(2, "452454423115124455517622277776666673333311");
add(2, "452454423115124455517622277776667663333311");
add(2, "4524543144221524122655517666611633");
add(2, "4544455454556613333717116677222211772233");
add(2, "45444554545566737333117711662221337222");
add(2, "45444554545531663373171133771177222222");
add(2, "4544455454553166337366171177222222116633");
add(2, "4544455454557333371771662211662211772233");
add(2, "4544455454557333661333171177667711222222");
add(2, "4544455454751335133777332211662266771166");
add(2, "4544455446675532213111722172775166662733");
add(2, "4544454556554323776336");
add(2, "4513344335445533455122111177777722");
add(2, "4513344335445533455122777711711766");
add(2, "4513344335445533455111211277777766");
add(2, "4513344335445533455177771127711266");
add(2, "4513344335443455535122777777111122");
add(2, "451334433555535312244224221166666611");
add(2, "451334433555535312244224661122666611");
add(2, "4513344335554433455122111177777722");
add(2, "451334433534445652152222111513277777766");
add(2, "4513344344123555551141136366");
add(2, "455544445451511331736666117663222222777733");
add(2, "455544445451516116662211772277226677333333");
add(2, "4555444454133331337777771166662222662255");
add(2, "4555444454133331337777116666772222662255");
add(2, "4555444454133331337777116666112222775522");
add(2, "4555444454133331557711117722226666772266");
add(2, "4555444454133331557711772222776666113366");
add(2, "4555444422222413131115133556273366");
add(2, "455551444454333333511166661166222222");
add(2, "456464474333431213361115521222");
add(2, "5546544452626313");
add(2, "36634232443433422554121126655556611");

}

    public static void add(int player, String moves) {
        if (player == 1) {
            player1.add(moves);
        } else {
            player2.add(moves);
        }
    }

    public static Integer getMove(int player, String moves) {
        List<String> openings = player == 1 ? player1 : player2;
        for(String candidate : openings) {
            if (candidate.startsWith(moves) && candidate.length() > moves.length()) {
                int move = Integer.parseInt(candidate.substring(moves.length(), moves.length()+1));
                return move;
            }
        }

        return null;
    }
}
